// package org.firstinspires.ftc.teamcode.AutoCode;
// import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
// import com.qualcomm.robotcore.hardware.TouchSensor;
// import com.qualcomm.robotcore.hardware.DcMotor;
// import com.qualcomm.robotcore.hardware.Servo;
// import com.qualcomm.robotcore.hardware.ColorSensor;
// import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
// import com.qualcomm.robotcore.hardware.DistanceSensor;
// import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
// import com.qualcomm.robotcore.hardware.DcMotor;
// import com.qualcomm.robotcore.hardware.DcMotorSimple;
// import com.qualcomm.robotcore.hardware.Servo;
// import com.qualcomm.robotcore.hardware.ColorSensor;
// import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
// 
// 
// @Autonomous 
// public class JamesAutoRed extends LinearOpMode 
// {
//   DcMotor FrontLeft;
//   DcMotor FrontRight;
//   DcMotor backLeft;
//   DcMotor backRight;
//   
//   DcMotor leftLiftMotor;
//   DcMotor rightLiftMotor;
//   DcMotor spinner;
//   Servo leftLineServo;
//   Servo rightLineServo;
//   Servo leftPin;
//   Servo rightPin;
//   Servo bucketLine;
//   
//   ColorSensor csensor;
//   DistanceSensor dsensor;
//   Servo purple;
//    public void runOpMode() 
//    {
//     // Should be under public void runOpMode()
//     FrontLeft = hardwareMap.get(DcMotor.class, "FrontLeftC0"); 
//     FrontRight = hardwareMap.get(DcMotor.class, "FrontRightC1");
//     backLeft = hardwareMap.get(DcMotor.class, "backLeftC2");
//     backRight = hardwareMap.get(DcMotor.class, "backRightC3");
//     
//     leftLiftMotor = hardwareMap.get(DcMotor.class, "leftLiftE0");
//     rightLiftMotor = hardwareMap.get(DcMotor.class, "rightLiftE1");
//     spinner = hardwareMap.get(DcMotor.class, "spinnerE2");
//     leftLineServo = hardwareMap.get(Servo.class, "leftLineE1");
//     rightLineServo = hardwareMap.get(Servo.class, "rightLineE0");
//     
//     purple = hardwareMap.get(Servo.class, "hammerE2");
//     dsensor = hardwareMap.get(DistanceSensor.class, "DistanceSensorC2");
//     csensor = hardwareMap.get(ColorSensor.class, "ColorSensorC1");
//     
//     /// Reverses the back 2 motors to allow all the methods to work properly
//     backRight.setDirection(DcMotor.Direction.REVERSE);
//     backLeft.setDirection(DcMotor.Direction.REVERSE);
//     //claw.setPosition(1);
//     
//         waitForStart();
//         if (opModeIsActive()) 
//         {
//             /// All of the methods you all go here
//             String path = " ";
//             slide(500);
//             chillout();
//             moveX(-450);
//             chillout();
//             if(dsensor.getDistance(DistanceUnit.INCH) < 6)
//             {
//               //  slideLeft(-420);
//                // chillout();
//               //  moveX(200);
//               //  chillout();
//               //  purple.setPosition(1);
//               //  chillout();
//                 //Include Parking code here
//               //  moveX(200);
//               //  chillout();
//               //  rotateRight(-450);
//              //   chillout();
//               //  moveX(-800);
//              //   chillout();
//                 //claw.setPosition(0.7);
//              //   chillout();
//              //   path = "Right";
//                 //slideLeft(-400);
//             }
//             else
//             {
//                // slideLeft(-300);
//                // chillout();
//                // moveX(-225);
//                // chillout();
//                 if(dsensor.getDistance(DistanceUnit.INCH) < 6)
//                 {
//                  //   slideLeft(375);
//                  //   chillout();
//                  //   moveX(-50);
//                  //   chillout();
//                  //   purple.setPosition(1);
//                  //   chillout();
//                  //   //Include parking code here
//                  //   moveX(200);
//                   //  chillout();
//                   //  rotateRight(-450);
//                   //  chillout();
//                   //  moveX(-950);
//                   //  chillout();
//                     //claw.setPosition(0.7);
//                 //    chillout();
//                 //    chillout();
//                  //   path = "Middle";
//                     //slideLeft(-600);
//                 }
//                 else
//                 {
//             //      moveX(125);
//              //     chillout();
//              //     slide(-400);
//              //     chillout();
//               //    purple.setPosition(1);
//               //    chillout();
//               //    //Include parking code here
//               //    //moveX(700);
//                //   chillout();
//               //    //rotate(450);
//                //   chillout();
//               //    //moveX(1500);
//               //    chillout();
//               //    //slide(300);
//               //    chillout();
//               //    //claw.setPosition(0.7);
//               //    chillout();
//               //    //slide(700);
//               //    path = "Left";
//                 }
//             }
//             while (opModeIsActive()) 
//             {
//                 /// This section goes after the commands end and displays data on the driver hub
//                 telemetry.addData("FLeft Pow", FrontLeft.getPower());
//                 telemetry.addData("BLeft Pow", FrontLeft.getPower());
//                 telemetry.addData("FRight Pow", FrontLeft.getPower());
//                 telemetry.addData("BRight Pow", FrontLeft.getPower());
//                 double value = dsensor.getDistance(DistanceUnit.INCH); 
//                 telemetry.addData("Distance: ", value);
//                 telemetry.addData("Path: ", path);
//                 telemetry.update();
//                 
//             }
//         }
//         
//    }
//     
//         /// All the methods you can call during autonomus
//         public void chillout()
//         {
//           sleep(500);
//         }
//         
//         public void moveX(int knots)
//         {
//             FrontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);FrontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);backLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);backRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
//             FrontLeft.setTargetPosition(knots);FrontRight.setTargetPosition(knots);backLeft.setTargetPosition(knots);backRight.setTargetPosition(knots);
//             FrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);FrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);backLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);backRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
//             FrontLeft.setPower(.5);
//             FrontRight.setPower(.5);
//             backLeft.setPower(.5);
//             backRight.setPower(.5);
//             while(FrontLeft.isBusy() && FrontRight.isBusy() && backLeft.isBusy() && backRight.isBusy() && opModeIsActive())
//             {//DO NOT PUT ANYTHING IN HERE
//             }
//             FrontLeft.setPower(0);FrontRight.setPower(0);backLeft.setPower(0);backRight.setPower(0);
//         }
//         
//         public void rotate(int knots)
//         {
//             FrontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);FrontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);backLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);backRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
//             FrontLeft.setTargetPosition(-knots);FrontRight.setTargetPosition(knots);backLeft.setTargetPosition(-knots);backRight.setTargetPosition(knots);
//             FrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);FrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);backLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);backRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
//             FrontLeft.setPower(-1);
//             FrontRight.setPower(1);
//             backLeft.setPower(-1);
//             backRight.setPower(1);
//             while(FrontLeft.isBusy() && FrontRight.isBusy() && backLeft.isBusy() && backRight.isBusy() && opModeIsActive())
//             {//DO NOT PUT ANYTHING IN HERE
//             }
//             FrontLeft.setPower(0);FrontRight.setPower(0);backLeft.setPower(0);backRight.setPower(0);
//         }
//         
//         public void slide(int knots)
//         {
//             FrontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);FrontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);backLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);backRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
//             FrontLeft.setTargetPosition(-knots);FrontRight.setTargetPosition(knots);backLeft.setTargetPosition(knots);backRight.setTargetPosition(-knots);
//             FrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);FrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);backLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);backRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
//             FrontLeft.setPower(.5);
//             FrontRight.setPower(.5);
//             backLeft.setPower(.5);
//             backRight.setPower(.5);
//             while(FrontLeft.isBusy() && FrontRight.isBusy() && backLeft.isBusy() && backRight.isBusy() && opModeIsActive())
//             {//DO NOT PUT ANYTHING IN HERE
//             }
//             FrontLeft.setPower(0);FrontRight.setPower(0);backLeft.setPower(0);backRight.setPower(0);
//         }
// }
// 
// 
// 
