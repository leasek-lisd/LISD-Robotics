/*
Copyright 2023 FIRST Tech Challenge Team FTC

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;

import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.TouchSensor;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;
import org.firstinspires.ftc.robotcore.external.navigation.*;//YawPitchRollAngles;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;

@Autonomous

  public class TestAuto extends LinearOpMode {
  private IMU imu;
  private Servo elbowServo;
  private Servo clawServo;
  private Servo extenderServo;
  private Servo lifterServo;
  private Servo launcherServo;
  private DistanceSensor distanceForward;
  private ColorSensor colorDown;
  private TouchSensor armMagnetC0;
  private int propLocation = 0;
  
  boolean USE_WEBCAM;

    @Override
    public void runOpMode() {
      elbowServo = hardwareMap.get(Servo.class, "elbowServoC0");
      clawServo = hardwareMap.get(Servo.class, "clawServoC1");
      extenderServo = hardwareMap.get(Servo.class, "extenderServoC2");
      lifterServo = hardwareMap.get(Servo.class, "lifterServoC3");
      launcherServo = hardwareMap.get(Servo.class, "launcherServoC4");
      imu = hardwareMap.get(IMU.class, "imu");
      
      
      elbowServo.scaleRange(0, 1);
      clawServo.scaleRange(0, 1);
      extenderServo.scaleRange(0, 1);
      lifterServo.scaleRange(0, 1);
      launcherServo.scaleRange(0, 1);
      
      elbowServo.setDirection(Servo.Direction.REVERSE);
      
      
      
      distanceForward = hardwareMap.get(DistanceSensor.class, "distanceForwardC1");
      colorDown = hardwareMap.get(ColorSensor.class, "colorDownC2");
      armMagnetC0 = hardwareMap.get(TouchSensor.class, "armMagnetC0");
      
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        // Wait for the game to start (driver presses PLAY)
        waitForStart();
          imu.initialize(new IMU.Parameters(new RevHubOrientationOnRobot(RevHubOrientationOnRobot.LogoFacingDirection.UP, RevHubOrientationOnRobot.UsbFacingDirection.BACKWARD)));
          DriveMotors motors = new DriveMotors(hardwareMap,imu, this); // frontLeftDrive, frontRightDrive,backLeftDrive, backRightDrive);
          Launcher drone = new Launcher(launcherServo);
          Claw claw = new Claw(clawServo);
          Arm arm = new Arm(elbowServo,armMagnetC0,hardwareMap);
          
          // need to put code below into contructors
          elbowServo.setPosition(.15);//retract
          clawServo.setPosition(.65);
          extenderServo.setPosition(1.0);
          lifterServo.setPosition(1.0);
          launcherServo.setPosition(1.0);
         // motors.forwardInches(12);
          telemetry.addData("Motors Busy? ", motors.areBusy());
            telemetry.update();
       // motors.forwardInches(6);
      // motors.rightInches(4);
      // motors.backwardInches(45);
      //  sleep(5000);
        boolean skip = false;
        
      motors.rotateRightDegrees(1210,.25);
        sleep(500);
        imu.resetYaw();
       
       
        motors.rotateLeftDegrees(260,.25);
        sleep(10000);
      if(skip||distanceForward.getDistance(DistanceUnit.INCH)<28&&distanceForward.getDistance(DistanceUnit.INCH)>24){
        telemetry.addLine("Middle Line Found");
        telemetry.update();
        motors.leftInches(4);
        
        motors.forwardInches(45,false);
        //sleep(2000);
        boolean found = false;
        while(motors.areBusy()){
            //sleep(200);
            if(colorDown.red() > 300){
             motors.allStop();
             telemetry.addLine("found color");
            telemetry.update();
            motors.backwardInches(1);
            found = true;
            }
            else{
                telemetry.addLine("looking for color " + colorDown.red());
            telemetry.update();
            }
        }
        if(!found){
          motors.backwardInches(6,false);
        while(motors.areBusy()){
        if(colorDown.red() > 300){
             motors.allStop();
             telemetry.addLine("found color");
            telemetry.update();
            motors.forwardInches(2);
            found = true;
            }
            else{
                telemetry.addLine("looking for color " + colorDown.red());
            telemetry.update();
            }
          
        }
        }
        telemetry.addLine("done moving" + colorDown.blue());
            telemetry.update();
        sleep(5000);
      } 
      else{
        motors.forwardInches(2);
        motors.leftInches(24,false);
        while(motors.areBusy()){
          if(distanceForward.getDistance(DistanceUnit.INCH)<22&&distanceForward.getDistance(DistanceUnit.INCH)>18){
            motors.allStop();
            telemetry.addLine("Left Line Found");
            motors.leftInches(13.5);
            
            telemetry.update();
            sleep(5000);
          }
        }
        
      } 
    }
      public double getYaw(){
      YawPitchRollAngles orientation;
      
      orientation = imu.getRobotYawPitchRollAngles();
      return orientation.getYaw(AngleUnit.DEGREES);
    }
     
    
  
    
    
}
