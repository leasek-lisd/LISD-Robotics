package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.IMU;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import com.qualcomm.robotcore.hardware.TouchSensor;
import org.firstinspires.ftc.robotcore.external.android.AndroidTextToSpeech;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import java.util.concurrent.ExecutionException;
import org.firstinspires.ftc.robotcore.external.hardware.camera.Camera;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import com.qualcomm.robotcore.robot.Robot;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.JavaUtil;
import org.firstinspires.ftc.robotcore.external.hardware.camera.BuiltinCameraDirection;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.vision.VisionPortal;
import org.firstinspires.ftc.vision.apriltag.AprilTagDetection;
import org.firstinspires.ftc.vision.apriltag.AprilTagProcessor;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.navigation.*;

@Autonomous(name = "AutoReaper2)")
public class ReaperAuto extends LinearOpMode {
private IMU imu;
 
  
  private Servo elbowServo;
  private Servo clawServo;
  private Servo extenderServo;
  private Servo lifterServo;
  private Servo launcherServo;
  
  private DistanceSensor distanceForward;
  private ColorSensor colorDown;
  private TouchSensor armMagnetC0;

  
  boolean USE_WEBCAM;
  AprilTagProcessor myAprilTagProcessor;
  VisionPortal myVisionPortal;
  YawPitchRollAngles orientation;
    AngularVelocity angularVelocity;
  /**
   * This function is executed when this OpMode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {

    
    

    
    
/* Servo Config  *********************************************  Servo Config */
    
    // Match to config file
    elbowServo = hardwareMap.get(Servo.class, "elbowServoC0");
    clawServo = hardwareMap.get(Servo.class, "clawServoC1");
    extenderServo = hardwareMap.get(Servo.class, "extenderServoC2");
    lifterServo = hardwareMap.get(Servo.class, "lifterServoC3");
    launcherServo = hardwareMap.get(Servo.class, "launcherServoC4");
    imu = hardwareMap.get(IMU.class, "imu");
    
    // Set Ranges
    elbowServo.scaleRange(0, 1);
    clawServo.scaleRange(0, 1);
    extenderServo.scaleRange(0, 1);
    lifterServo.scaleRange(0, 1);
    launcherServo.scaleRange(0, 1);
    
   // Set Directions
    elbowServo.setDirection(Servo.Direction.REVERSE);
   
    ElapsedTime myTimer = new ElapsedTime();
    ElapsedTime myElapsedTime = new ElapsedTime();
   elbowServo.setPosition(.15);//retract
   clawServo.setPosition(.65);
  // elbowServo.setPosition(.5);
   sleep(500);
//  elbowServo.setPosition(0);
    extenderServo.setPosition(1.0);
    lifterServo.setPosition(1.0);
    launcherServo.setPosition(1.0);
    // Put initialization blocks here.
    myTimer = new ElapsedTime();
    
       
/* Sensor Config  *****************************************  Sensor Config */    
    
    distanceForward = hardwareMap.get(DistanceSensor.class, "distanceForwardC1");
    colorDown = hardwareMap.get(ColorSensor.class, "colorDownC2");
    armMagnetC0 = hardwareMap.get(TouchSensor.class, "armMagnetC0");    
/* Webcam Config androidTextToSpeech.initialize(); *********************************************  Webcam Config */    
    
    USE_WEBCAM = true;
   // initAprilTag();
    
/* Init Telemetry  *****************************************  Init Telemetry */
   initAprilTag();
    
waitForStart();
    imu.initialize(new IMU.Parameters(new RevHubOrientationOnRobot(RevHubOrientationOnRobot.LogoFacingDirection.UP, RevHubOrientationOnRobot.UsbFacingDirection.FORWARD)));
    
    if (opModeIsActive()) {
      DriveMotors motors = new DriveMotors(hardwareMap); // frontLeftDrive, frontRightDrive,backLeftDrive, backRightDrive);
      Launcher drone = new Launcher(launcherServo);
      Claw claw = new Claw(clawServo);
      RoboCam camera1 = new RoboCam(myAprilTagProcessor,myVisionPortal,motors);
      PurplePixelPlacer ppp = new PurplePixelPlacer();
      //   Arm arm = new Arm(armMotorLeft, armMotorRight,elbowServo,armMagnetC0);
     Arm arm = new Arm(elbowServo,armMagnetC0,hardwareMap);
     
        myElapsedTime.reset();
        int propLocation = 0;
   /*  try {
        propLocation = ppp.findProp(1,motors,lifterServo, colorDown, distanceForward, this);
       }
       catch(InterruptedException e){}
       catch(ExecutionException e){};
       
       switch(propLocation){
        case 0:
         motors.strafeRight(1);
         break;
        case 1:
         motors.strafeRight(.5);
         break;
        case 2: 
         motors.strafeRight(.25);
         break;
        case 3:
         motors.strafeRight(.1);
         break;
       }
     */
     double armSpeed = 1;
     // if(gamepad2.dpad_up){
     
    /*    motors.rightInches(18);
        sleep(1500);
        motors.forwardInches(6);*/
        sleep(1000);
        arm.moveSteps(180,armSpeed);
        sleep(500);
        elbowServo.setPosition(.55);
        sleep(500);
        clawServo.setPosition(0);
        sleep(500);
       elbowServo.setPosition(.15);
        sleep(500);
    //  }
     sleep(5000);
       //motors.forwardInches(12);
    /*   motors.forwardInches(18); 
       motors.setStepPower(.75);
       motors.forwardInches(18); 
       motors.setStepPower(1);
       motors.forwardInches(18); 
       //sleep(1000);
       //motors.allStop(); 
       sleep(500);
      /* motors.rotateLeft(.25); 
       sleep(1000);
       motors.allStop();
       
      */
    }
  }
  private void initAprilTag() {
    AprilTagProcessor.Builder myAprilTagProcessorBuilder;
    VisionPortal.Builder myVisionPortalBuilder;

    // First, create an AprilTagProcessor.Builder.
    myAprilTagProcessorBuilder = new AprilTagProcessor.Builder();
    myAprilTagProcessorBuilder.setLensIntrinsics(835.112, 835.112, 322.08, 242.678);
    
    // Create an AprilTagProcessor by calling build.
    myAprilTagProcessor = myAprilTagProcessorBuilder.build();
    // Next, create a VisionPortal.Builder and set attributes related to the camera.
    myVisionPortalBuilder = new VisionPortal.Builder();
    if (USE_WEBCAM) {
      // Use a webcam.
      myVisionPortalBuilder.setCamera(hardwareMap.get(WebcamName.class, "Webcam 1"));
    } else {
      // Use the device's back camera.
      myVisionPortalBuilder.setCamera(BuiltinCameraDirection.BACK);
    }
    
    // Add myAprilTagProcessor to the VisionPortal.Builder.
    myVisionPortalBuilder.addProcessor(myAprilTagProcessor);
    // Create a VisionPortal by calling build.
    myVisionPortal = myVisionPortalBuilder.build();
  }

}
